---
title: "Viz and Analysis"
author: "Phillip Sanderell"
format: html
editor: visual
---

## Load the scraped data

```{r}
load("ts-clean.rdata")
ts <- ts_clean
remove(ts_clean)
```

## Load packages

```{r, message=FALSE}
library(tidyverse)
```

## Bin album labels into main albums

```{r}
main_albums <- 
  c(
  "Taylor Swift",
  "Fearless",
  "Speak Now",
  "Red",
  "1989",
  "Reputation",
  "Lover",
  "Folklore",
  "Evermore",
  "Midnights",
  "The Tortured Poets Department"
)
```

```{r}
ts <- 
  ts |> 
  rowwise() |> 
  mutate(
    main_album = 
      str_detect(albums, main_albums) |> 
      match(TRUE, table = _) |> 
      {\(x) main_albums[x]}()
  ) |> 
  ungroup()
```

## Subset to main songs in discography

```{r}
main_songs <- 
  ts |> 
  # Filter out songs that weren't part of a main album
  filter(!is.na(main_album)) |> 
  # Filter out remixes
  filter(!str_detect(song, "remix")) |> 
  # Don't double count 10 minute versions :)
  filter(!str_detect(song, "10 minute version"))
```

## Did any main songs not include Taylor Swift as a songwriter?

```{r}
main_songs |> 
  rowwise() |> 
  mutate(
    ts =
      str_detect(songwriters, "Taylor") |>
      any()
  ) |> 
  arrange(ts * 1)
```

The only songs that don't include Taylor Swift as songwriter are covers from her Speak Now World Tour – Live album. Let's filter these out as well.

```{r}
main_songs <-
  main_songs |> 
  # Filter out live covers
  filter(!str_detect(song, 'live cover')) |> 
  arrange(main_album)
```

Let's look at top collaborating songwriters now.

```{r}
main_songs |> 
  unnest_longer(songwriters) |> 
  filter(songwriters != "Taylor Swift") |> 
  count(songwriters, sort = TRUE)
```

There are a handful of major collaborators, a decent bit of collaborators with a few songs, and a good number of collaborators with just one or two songs. I'm mostly interested in the more prominent collaborators.

```{r}
main_songs <- 
  main_songs |> 
  unnest_longer(songwriters) |> 
  # Mark a songwriter as "top" if they collaborated on more 
  # than 4 songs.
  mutate(
    top_songwriter = length(songwriters) > 4,
    top_songwriter = if_else(
      top_songwriter, 
      songwriters, 
      "other"
      ), 
    .by = songwriters
  )
```

I'm interested in the distribution of songwriters across albums in chronological order.

```{r}
theme_set(theme_minimal())

main_songs |> 
  filter(songwriters != "Taylor Swift") |> 
  mutate(main_album = fct_relevel(main_album, main_albums)) |> 
  ggplot(aes(x = main_album, fill = top_songwriter)) +
  geom_bar() + 
  coord_flip()
```

It's interesting that there is a very small number of songs on Speak Now with a songwriter other than Taylor Swift. Did she basically write most of her songs alone on that album?

```{r}
main_songs |> 
  filter(main_album == "Speak Now")
```

She really did. An icon!

Next, I'm thinking it might be easier to see popularity of collaborators if I fill by album.

```{r}
main_songs |> 
  filter(songwriters != "Taylor Swift") |> 
  mutate(main_album = fct_relevel(main_album, main_albums)) |> 
  mutate(top_songwriter = fct_reorder(top_songwriter,
                                      top_songwriter,
                                      length)) |> 
  
  ggplot(aes(fill = main_album, y = top_songwriter)) +
  geom_bar() +
  scale_fill_brewer(palette = "RdYlGn")
```

I need a more easily readable color palette. Let's try making one that aligns with the album covers.

```{r}
ts_colors <- 
  c(
    "Taylor Swift" = '#6cd4ff',
    "Fearless" = '#ffd166',
    "Speak Now" = '#b118c8',
    "Red" = '#d00000',
    "1989" = '#FBD1A2',
    "Reputation" = '#2a2d34',
    "Lover" = '#f49fbc',
    "Folklore" = '#94958b',
    "Evermore" = '#ff521b',
    "Midnights" = '#89a6fb',
    "The Tortured Poets Department" = '#393e41'
  )
```

```{r}
main_songs |> 
  filter(songwriters != "Taylor Swift") |> 
  mutate(main_album = fct_relevel(main_album, 
                                  rev(main_albums))) |> #reverse
  mutate(top_songwriter = fct_reorder(top_songwriter,
                                      top_songwriter,
                                      length)) |> 
  
  ggplot(aes(fill = main_album, y = top_songwriter)) +
  geom_bar() +
  scale_fill_manual(values = ts_colors)
```

Now let's try making the legend easier to read.

```{r, fig.width=5, fig.height=5}
main_songs |> 
  filter(songwriters != "Taylor Swift") |> 
  mutate(top_songwriter = 
           if_else(top_songwriter == 'other', 
                 'other (Songwriters other than the rest listed)',
                 top_songwriter)) |> 
  mutate(main_album = fct_relevel(main_album, 
                                  rev(main_albums))) |> #reverse
  mutate(top_songwriter = fct_reorder(top_songwriter,
                                      top_songwriter,
                                      length)) |> 
  mutate(top_songwriter = fct_rev(top_songwriter)) |> 
  ggplot(aes(fill = main_album, y = top_songwriter)) +
  geom_bar(width = 1) +
  facet_wrap(~ top_songwriter, ncol = 1, scales = "free_y") +
  labs(
    title = 'Top songwriters on Taylor Swift songs',
    subtitle = 'Jack Antonoff has worked on every album since 1989',
    y = NULL,
    x = NULL,
  ) +
  scale_x_continuous(
    expand = c(0, 0),
    limits = c(0, 83),
    position = 'top',
    labels = c(0, "20 songs...", 40, 60, 80)
  ) +
  scale_fill_manual(
    values = ts_colors,
    guide = guide_legend(reverse = TRUE,
                         nrow = 3,
                         title = 'Albums'),
    labels = main_albums |> 
      rev()
      # str_wrap(20)
    ) +
  scale_y_discrete(guide = 'none') +
  theme_minimal() +
  theme(
    text = element_text(family = 'Inter'),
    plot.title = element_text(size = rel(1.88),
                              family = 'DM Serif Display'),
    plot.subtitle = element_text(margin = margin(b = rel(20)),
                                 color = 'gray60'),
    legend.position = "top",
    legend.title = element_text(face = 'bold', size = rel(.9)),
    legend.title.position = 'top',
    axis.title.x = element_text(hjust = 1),
    axis.text.x = element_text(hjust = 0, color = 'gray70'),
    legend.key.height = rel(.6),
    legend.key.width  = rel(.6),
    legend.byrow = FALSE,
    legend.justification = c(0, 1),
    legend.margin = margin(0, 0, rel(7), 0),
    strip.text = element_text(
      hjust = 0, 
      margin = margin(1, 0, 1, 0),
      size = rel(1), 
      face = 'bold'
    ),
    panel.grid = element_blank()
  )
```

-   Need to change font, at least for the title.

-   Need to add captions.

-   Might need to add more margins around the whole plot at the end.

-   Need to put '1989' in italics (if I can with this font and `{ggtext}`).

```{r}
# Load google font
library(sysfonts)
sysfonts::font_add_google('Inter')
```

I'm having trouble viewing this font and troubleshooting that led to my `.qmd` preview of the visualization becoming blurry. So, I'm loading up the `{camcorder}` package.

```{r}
library(camcorder)

temp_dir <- file.path(tempdir(), "recording100")

gg_record(
  dir = temp_dir, # where to save the recording
  device = "png", # device to use to save images
  width = 5,      # width of saved image
  height = 5,     # height of saved image
  units = "in",   # units for width and height
  dpi = 320       # dpi to use when saving image
)
```

Update: it wasn't working because I was saying to use a 'bold' face when there isn't a bold version of that font on my computer. After removing the 'bold' face argument, the correct font loaded.
